name: 'Setup Build'
description: 'Setup env & generate solution'

inputs:
  platform-name:
    description: 'Platform name <x86, x64, arm64>'
    required: true
  configuration-name:
    description: 'Configuration name <Debug / Release>'
    required: true
  solution-name:
    description: 'Solution name to generate'
    required: true

runs:
  using: "composite"
  steps:
  - name: Add MSBuild ${{inputs.platform-name}} to PATH
    uses: microsoft/setup-msbuild@v2
    with:
      msbuild-architecture: ${{inputs.platform-name}}

  - name: Add MASM ${{inputs.platform-name}} to PATH
    uses: Source-Authors/setup-masm@v1.3
    with:
      vs-architecture: ${{inputs.platform-name}}

  - name: Add cmake / nmake to PATH
    uses: ilammy/msvc-dev-cmd@v1
    with:
      arch: ${{inputs.platform-name}}

  - name: Cache VPC output
    id: cache-vpc
    uses: actions/cache@v4
    with:
      path: |
        .\external\vpc\out
        .\devtools\bin\vpc*
      key: Vpc-${{runner.os}}-${{inputs.platform-name}}-${{ hashFiles('.git\modules\external\vpc\refs\heads\main') }}

  - name: Show dependencies SHAs
    id: get-dependencies-sha
    run: |
      for /d %%d in (".git\modules\thirdparty\*") do (
        if exist "%%d\refs\heads\main" (
          echo %%d\refs\heads\main >> dependencies.shas.txt
          type "%%d\refs\heads\main" >> dependencies.shas.txt
        )
      )

      echo Dependencies referenced SHAs
      type dependencies.shas.txt
    shell: cmd

  - name: 'Cache dependencies output for ${{inputs.solution-name}}_${{inputs.platform-name}}.sln'
    id: cache-dependencies
    uses: actions/cache@v4
    with:
      path: |
        .\thirdparty\**\out
        .\thirdparty\**\*.lib
        .\thirdparty\**\*.dll
        .\thirdparty\**\*.exe
      key: Thirdparty-${{runner.os}}-${{inputs.platform-name}}-${{ hashFiles('dependencies.shas.txt') }}

  - name: Get build version
    id: get-build-version
    working-directory: ${{env.GITHUB_WORKSPACE}}
    if: runner.os == 'Windows'
    run: |
      for /f %%i in ('git rev-list --branches HEAD ^| findstr /R /N "^" ^| find /C ":"') do set PATCH_VERSION=%%i

      set PATCH_VERSION=1.3.2.%PATCH_VERSION%
      echo BUILD_VERSION=%PATCH_VERSION% >> %GITHUB_OUTPUT%

      echo Building ${{inputs.solution-name}} v.%PATCH_VERSION%
    shell: cmd

  - name: 'Build dependencies for ${{inputs.solution-name}}_${{inputs.platform-name}}.sln'
    working-directory: ${{env.GITHUB_WORKSPACE}}
    if: steps.cache-dependencies.outputs.cache-hit != 'true'
    run: .\build_game_thirdparty.bat ${{inputs.platform-name}}
    shell: cmd

  - name: Build VPC
    working-directory: ${{env.GITHUB_WORKSPACE}}
    if: steps.cache-vpc.outputs.cache-hit != 'true'
    run: .\build_vpc.bat
    shell: cmd

  - name: Generate build version information
    working-directory: ${{env.GITHUB_WORKSPACE}}
    run: .\generate_build_info.bat
    shell: cmd

  - name: 'Generate solution ${{inputs.solution-name}}_${{inputs.platform-name}}.sln'
    working-directory: ${{env.GITHUB_WORKSPACE}}
    run: .\create_game_projects.bat ${{inputs.solution-name}} ${{inputs.platform-name}}
    shell: cmd

  - name: '${{inputs.configuration-name}} build solution ${{inputs.solution-name}}_${{inputs.platform-name}}.sln'
    working-directory: ${{env.GITHUB_WORKSPACE}}
    run: msbuild ${{inputs.solution-name}}_${{inputs.platform-name}}.sln /m -verbosity:minimal /p:Configuration=${{inputs.configuration-name}} /p:Platform=${{inputs.platform-name}}
    shell: cmd

  - name: Get build artifacts path
    id: get-build-artifacts-path
    working-directory: ${{env.GITHUB_WORKSPACE}}
    run: |
      pushd "..\game"
      set ABS_PATH=%CD%
      popd
      @chcp 65001>nul
      echo BUILD_ARTIFACTS_PATH=%ABS_PATH% >> %GITHUB_OUTPUT%
    shell: cmd

  - name: 'Upload ${{inputs.solution-name}}_${{inputs.platform-name}}_${{inputs.configuration-name}} build artifacts'
    uses: actions/upload-artifact@v4
    with:
      name: '${{inputs.solution-name}}-${{runner.os}}-${{inputs.platform-name}}-${{inputs.configuration-name}}-${{steps.get-build-version.outputs.BUILD_VERSION}}'
      path: '${{steps.get-build-artifacts-path.outputs.BUILD_ARTIFACTS_PATH}}'
      if-no-files-found: error
      retention-days: 1
      compression-level: 9
