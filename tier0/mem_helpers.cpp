// Copyright Valve Corporation, All rights reserved.

#include "stdafx.h"
#include "mem_helpers.h"

#include <cstdint>
#include <limits>

#ifdef POSIX
void DoApplyMemoryInitializations( void *pMem, size_t nSize )
{
}

size_t CalcHeapUsed()
{
	return 0;
}

#else

bool g_bInitMemory = true;
const std::uint32_t g_u32FFeeFFee = 0xffeeffee;

// Generated by Mathematica.
static unsigned char g_RandomValues[256] = {
	95, 126, 220, 71, 92, 179, 95, 219, 111, 150, 38, 155, 181, 62, 40, 231, 238,
	54, 47, 55, 186, 204, 64, 70, 118, 94, 107, 251, 199, 140, 67, 87, 86, 127,
	210, 41, 21, 90, 208, 24, 167, 204, 32, 254, 38, 51, 9, 11, 38, 33, 188, 104,
	0, 75, 119, 24, 122, 203, 24, 164, 250, 224, 241, 182, 213, 201, 173, 67,
	200, 255, 244, 227, 46, 219, 26, 149, 218, 132, 120, 154, 227, 244, 106, 198,
	109, 87, 150, 40, 16, 99, 169, 193, 100, 156, 78, 171, 246, 47, 84, 119, 10,
	52, 207, 171, 230, 90, 90, 127, 180, 153, 68, 140, 62, 14, 87, 57, 208, 154,
	116, 29, 131, 177, 224, 187, 51, 148, 142, 245, 152, 230, 184, 117, 91, 146,
	235, 153, 35, 104, 187, 177, 215, 131, 17, 49, 211, 244, 60, 152, 103, 248,
	51, 224, 237, 240, 51, 30, 10, 233, 253, 106, 252, 73, 134, 136, 178, 86,
	228, 107, 77, 255, 85, 242, 204, 119, 102, 53, 209, 35, 123, 32, 252, 210,
	43, 12, 136, 167, 155, 210, 71, 254, 178, 172, 3, 230, 93, 208, 196, 68, 235,
	16, 106, 189, 201, 177, 85, 78, 206, 187, 48, 68, 64, 190, 117, 236, 49, 174,
	105, 63, 207, 70, 170, 93, 6, 110, 52, 111, 169, 92, 247, 86, 10, 174, 207,
	240, 104, 209, 81, 177, 123, 189, 175, 212, 101, 219, 114, 243, 44, 91, 51,
	139, 91, 57, 120, 41, 98, 119 };

// dimhotepus: x86-64 ready memory offset.
static size_t g_iCurRandomValueOffset = 0;


static void InitializeToFeeFee( void *pMem, size_t nSize )
{
#ifdef PLATFORM_64BITS
	auto *pCurQWord = static_cast<std::uint64_t *>(pMem);
	size_t nQWords{nSize / sizeof(std::uint64_t)};
	while ( nQWords )
	{
		*pCurQWord = 0xffeeffeeffeeffeeULL;

		++pCurQWord;
		--nQWords;
	}

	auto *pCurDWord = reinterpret_cast<std::uint32_t *>(pCurQWord);
	size_t nDWords{(nSize & (sizeof(std::uint64_t) - 1)) / sizeof(std::uint32_t)};
#else
	auto *pCurDWord = static_cast<std::uint32_t *>(pMem); //-V206
	size_t nDWords{nSize / sizeof(std::uint32_t)};
#endif

	while ( nDWords )
	{
		*pCurDWord = 0xffeeffeeU;

		++pCurDWord;
		--nDWords;
	}
	
	auto *pCurChar = reinterpret_cast<std::uint8_t *>(pCurDWord); //-V206
	size_t nBytes{nSize & (sizeof(std::uint32_t) - 1)};
	size_t iOffset = 0;
	while ( nBytes )
	{
		*pCurChar = reinterpret_cast<const std::uint8_t *>(&g_u32FFeeFFee)[iOffset]; //-V206

		++iOffset;
		--nBytes;
		++pCurChar;
	}
}


static void InitializeToRandom( void *pMem, size_t nSize )
{
	unsigned char *pOut = (unsigned char *)pMem;
	for ( size_t i=0; i < nSize; i++ )
	{
		pOut[i] = g_RandomValues[(g_iCurRandomValueOffset & 255)];
		++g_iCurRandomValueOffset;
	}
}


void DoApplyMemoryInitializations( void *pMem, size_t nSize )
{
	if ( !pMem )
		return;
	
	// If they passed -noinitmemory on the command line, don't do anything here.
	Assert( g_bInitMemory );

	// First time we get in here, remember all the settings.
	static bool bDebuggerPresent = Plat_IsInDebugSession();
	static bool bCheckedCommandLine = false;
	static bool bRandomizeMemory = false;
	if ( !bCheckedCommandLine )
	{
		bCheckedCommandLine = true;
		
		//APS
		const char *pStr = Plat_GetCommandLineA();
		if ( pStr )
		{
			char tempStr[512];
			strncpy( tempStr, pStr, std::size( tempStr ) );
			tempStr[ std::size( tempStr ) - 1 ] = '\0';
			_strupr( tempStr );
			
			if ( strstr( tempStr, "-RANDOMIZEMEMORY" ) )
				bRandomizeMemory = true;
			
			if ( strstr( tempStr, "-NOINITMEMORY" ) )
				g_bInitMemory = false;
		}
	}

	if ( bRandomizeMemory )
	{
		// They asked for it.. randomize all the memory.
		InitializeToRandom( pMem, nSize );
	}
	else
	{
		if ( bDebuggerPresent )
		{
			// Ok, it's already set to 0xbaadf00d, but we want something that will make floating-point #'s NANs.
			InitializeToFeeFee( pMem, nSize );
		}
		else
		{
#ifdef _DEBUG
			// Ok, it's already set to 0xcdcdcdcd, but we want something that will make floating-point #'s NANs.
			InitializeToFeeFee( pMem, nSize );
#endif
		}
	}
}

size_t CalcHeapUsed()
{
	_HEAPINFO	hinfo = {};
	int			heapstatus;
	size_t		nTotal{0};

	while ( ( heapstatus = _heapwalk( &hinfo ) ) == _HEAPOK )
	{
		nTotal += hinfo._useflag == _USEDENTRY ? hinfo._size : 0;
	}

	switch (heapstatus)
	{
		case _HEAPEMPTY:
		case _HEAPEND:
			// success
			break;

		default:
			// heap corrupted
			nTotal = std::numeric_limits<size_t>::max();
	}

	return nTotal;
}
#endif

